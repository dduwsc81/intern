from sqlalchemy import Column, Integer, String, BigInteger, DateTime, Date
from app.db.base_class import Base


class Car(Base):
    id = Column(BigInteger, primary_key=True, unique=True, autoincrement=True, comment='車両ID')
    car_code = Column(String(13), index=True, comment='cM車両コード')
    company_code = Column(String(13), index=True, comment='企業コード')
    car_owner = Column(String(13), comment='所有者')
    car_decision_maker = Column(String(13), index=True, comment='意思決定者')
    external_system_type = Column(String(13), index=True, comment='外部システム区分')
    external_system_key1 = Column(String(255), index=True, comment='外部システムキー1')
    external_system_key2 = Column(String(255), comment='外部システムキー2')
    maker = Column(String(255), comment='メーカー')
    car_type = Column(String(255), comment='車種')
    grade = Column(String(255), comment='グレード')
    aggregation_maker_code = Column(String(255), comment='メーカーコード（名寄せ結果）')
    aggregation_maker = Column(String(255), comment='メーカー（名寄せ結果）')
    aggregation_car_type = Column(String(255), comment='車種（名寄せ結果）')
    aggregation_grade = Column(String(255), comment='グレード（名寄せ結果）')
    aggregation_data_number = Column(BigInteger, comment='データNo（名寄せ結果）')
    aggregation_identified_flag = Column(Integer, comment='特定フラグ（名寄せ結果）')
    aggregation_image_url = Column(String(255), comment="カタログ画像URL（名寄せ結果）")
    chassis_number = Column(String(255), comment='車台番号')
    sale_new_old_car_type = Column(String(13), comment='新中区分')
    purchase_intention = Column(String(13), comment='買換意向')
    transfer_intention_status = Column(String(13), comment='乗換希望ステータス')
    transfer_intention_updater = Column(String(13), comment='乗換希望フラグ更新者')
    transfer_intention_updatetime = Column(DateTime, default=None, comment='乗換希望フラグ更新日時')
    information_pattern = Column(String(13), comment='情報元パターン')
    information_type = Column(String(255), comment='情報元アンケート種別')
    information_id = Column(BigInteger, comment='情報元アンケートID')
    register_staff_code = Column(String(13), comment='登録スタッフコード')
    register_store_code = Column(String(13), comment='登録店舗コード')
    car_mileage = Column(Integer, comment='走行距離')
    car_mileage_registration_date = Column(Date, comment='走行距離登録日時')
    land_transport_office = Column(String(255), comment='陸運事務局名称')
    car_registration_number_type = Column(String(255), comment='車両登録番号（種別')
    car_registration_number_kana = Column(String(255), comment='車両登録番号（カナ)')
    car_registration_number = Column(String(255), comment='車両登録番号（プレート番号）')
    registration_first_date = Column(Date, comment='初度登録年月')
    registration_start_date = Column(Date, comment='登録年月日')
    registration_end_date = Column(Date, comment='車検満了日')
    active_flag = Column(Integer, comment='アクティブフラグ')
    guide_availability_sms = Column(Integer, comment='SMS不要フラグ')
    guide_availability_dm = Column(Integer, comment='DM不要フラグ')
    guide_availability_call = Column(Integer, comment='コール不要フラグ')
    guide_availability_line = Column(Integer, comment='LINE不要フラグ')
    guide_availability_email = Column(Integer, comment='メール不要フラグ')
    insert_id = Column(BigInteger, nullable=False, comment='登録者')
    insert_at = Column(DateTime, nullable=False, comment='登録日時')
    update_id = Column(BigInteger, nullable=False, comment='登録者')
    update_at = Column(DateTime, nullable=False, comment='更新日時')
    delete_id = Column(BigInteger, comment='削除日時')
    delete_at = Column(DateTime, default=None, comment='削除者')
    delete_flag = Column(Integer, index=True, default=0, nullable=False, comment='削除フラグ')
    car_mileage_inspection_datetime = Column(DateTime, default=None, comment='走行距離点検日時')

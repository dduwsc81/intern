from sqlalchemy import Column, Integer, String, BigInteger, DateTime, Date, Numeric
from app.db.base_class import Base


class CarDetails(Base):
    id = Column(BigInteger, primary_key=True, unique=True, autoincrement=True, comment='車両ID')
    car_id = Column(BigInteger, nullable=False, comment='車両ID')
    car_code = Column(String(13), index=True, comment='cM車両コード')
    company_code = Column(String(13), index=True, nullable=False, comment='企業コード')
    car_inspection_type = Column(String(255), comment='車検証型式')
    aggregation_car_inspection_type = Column(String(255), comment='車検証型式（名寄せ結果）')
    engine_type = Column(String(255), comment='エンジン型式')
    engine_maximum_output = Column(String(255), comment='最大出力')
    engine_torque = Column(String(255), comment='最大トルク')
    tire_status = Column(String(13), comment='タイヤ状態')
    tire_status_inspection_datetime = Column(DateTime, comment='タイヤ状態点検日時', default=None)
    tire_size_rear = Column(String(255), comment='タイヤサイズ(リア)')
    tire_size_front = Column(String(255), comment='タイヤサイズ(フロント)')
    tire_size_inspection_datetime = Column(DateTime, comment='タイヤサイズ点検日時', default=None)
    tire_create_year = Column(String(255), comment='タイヤ製造年')
    tire_create_week = Column(String(255), comment='タイヤ製造年')
    tire_create_year_week_inspection_datetime = Column(DateTime, comment='タイヤ製造年週点検日時', default=None)
    tire_grooves_front = Column(String(255), comment='タイヤ残溝（フロント）')
    tire_grooves_rear = Column(String(255), comment='タイヤ残溝（リア）')
    tire_grooves_inspection_datetime = Column(DateTime, comment='タイヤ残溝点検日時', default=None)
    fuel_tank_size = Column(String(255), comment='燃料タンク')
    battery_status = Column(String(13), comment='バッテリー状態')
    battery_status_inspection_datetime = Column(DateTime, comment='バッテリー状態点検日時', default=None)
    battery_size = Column(String(255), comment='バッテリーサイズ')
    battery_create_date = Column(Date, comment='バッテリー製造年月')
    battery_size_inspection_datetime = Column(DateTime, comment='バッテリーサイズ点検日時', default=None)
    color_code_type = Column(String(255), comment='カラーコードタイプ')
    color_trim_code_type = Column(String(255), comment='トリムコードタイプ')
    model = Column(String(255), comment='モデル')
    sales_period_start = Column(String(255), comment='販売開始年月')
    warranty_period_end = Column(String(255), comment='保証終了年月')
    fuel_economy_jc08 = Column(String(255), comment='燃料（JC08モード')
    car_weight = Column(String(255), comment='車両重量')
    car_full_length = Column(String(255), comment='車両寸法（全長')
    car_full_width = Column(String(255), comment='車両寸法（全幅')
    car_total_height = Column(String(255), comment='車両寸法（全高')
    engine_oil_status = Column(String(13), comment='エンジンオイル状態')
    engine_oil_status_inspection_datetime = Column(DateTime, comment='エンジンオイル状態点検日時', default=None)
    brake_fluid_status = Column(String(13), comment='ブレーキフルード状態')
    brake_fluid_status_inspection_datetime = Column(DateTime, comment='ブレーキフルード状点検日時', default=None)
    engine_coolant_status = Column(String(13), comment='エンジン冷却水状態')
    engine_coolant_status_inspection_datetime = Column(DateTime, comment='エンジン冷却水状点検日時', default=None)
    at_ctv_field_status = Column(String(13), comment='AT(CVT)フルード状態')
    at_ctv_field_status_inspection_datetime = Column(DateTime, comment='AT(CVT)フルード状点検日時', default=None)
    wiper_status = Column(String(13), comment='ワイパー状態')
    wiper_status_inspection_datetime = Column(DateTime, comment='ワイパー状点検日時', default=None)
    lamp_status = Column(String(13), comment='ランプ類状態')
    lamp_status_inspection_datetime = Column(DateTime, comment='ランプ類状点検日時', default=None)
    aggregation_sales_period_start = Column(String(255), comment='販売開始年月（名寄せ結果）')
    insert_id = Column(Integer, nullable=False, comment='登録者')
    insert_at = Column(DateTime, nullable=False, comment='登録日時')
    update_id = Column(Integer, nullable=False, comment='登録者')
    update_at = Column(DateTime, nullable=False, comment='更新日時')
    delete_id = Column(Integer, comment='削除日時')
    delete_at = Column(DateTime, default=None, comment='削除者')
    delete_flag = Column(Integer, index=True, default=0, nullable=False, comment='削除フラグ')
    aggregation_wholesale_price_market = Column(Numeric(15, 5), comment='業販価格（相場）（名寄せ結果）')
    aggregation_wholesale_price_high = Column(Numeric(15, 5), comment='業販価格（High）（名寄せ結果）')
    aggregation_wholesale_price_middle = Column(Numeric(15, 5), comment='業販価格（Middle）（名寄せ結果）')
    aggregation_wholesale_price_low = Column(Numeric(15, 5), comment='業販価格（Low）（名寄せ結果）')
    aggregation_retail_price_market = Column(Numeric(15, 5), comment='小売価格（相場）（名寄せ結果）')
    aggregation_retail_price_high = Column(Numeric(15, 5), comment='小売価格（High）（名寄せ結果）')
    aggregation_retail_price_middle = Column(Numeric(15, 5), comment='小売価格（Middle）（名寄せ結果）')
    aggregation_retail_price_low = Column(Numeric(15, 5), comment='小売価格（Low）（名寄せ結果）')

    front_exterior_image = Column(String(13), comment="外装(フロント)")
    side_exterior_image = Column(String(13), comment="外装(サイド)")
    back_exterior_image = Column(String(13), comment="外装(バック)")
    optional_exterior_image = Column(String(13), comment="外装(オプション)")
    front_interior_image = Column(String(13), comment="内装(フロント)")
    seat_interior_image = Column(String(13), comment="内装(シート)")
    meter_interior_image = Column(String(13), comment="内装(メーター)")
    option_interior_image = Column(String(13), comment="内装(オプション)")
    repair_interior_image = Column(String(13), comment="内装修復")
    repair_exterior_image = Column(String(13), comment="外装修復")
    tire_grooves_front_r = Column(String(255), comment="タイヤ残溝（フロント右）")
    tire_grooves_rear_r = Column(String(255), comment="タイヤ残溝（リア右）")